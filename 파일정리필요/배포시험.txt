1-1. Ubuntu 서버에 OpenJDK 17을 설치하는 명령어를 작성하시오

sudo dnf install java-17-amazon-corretto -y

1-2. Git이 설치되어 있지 않을 경우 설치하는 명령어를 작성하시오.  

sudo dnf install git -y

1-3. SSH 접속을 위한 공개키/개인키 쌍을 생성하는 명령어를 작성하시오.  

ssh-keygen -t rsa -b 4096 -C "your_email@example.com"

1-4. 생성된 공개키를 확인하는 명령어를 작성하시오.  

cat ~/.ssh/id_rsa.pub

1-5. 현재 리눅스 방화벽에서 열린 포트를 확인하는 명령어를 작성하시오.

./gradlew -v

2-1. GitHub에 있는 저장소를 로컬로 복제하는 명령어 

git clone https://github.com/사용자명/저장소명.git

2-2. 숨김 파일을 포함하여 .git 디렉토리 존재 여부를 확인하는 명령어 

ls -a

2-3. application.properties 파일을 열어서 포트 번호를 확인하는 명령어

cat src/main/resources/application.properties

2-4. Gradle 의존성 트리를 확인하는 명령어 

./gradlew  dependencies

2-5. Gradle 또는 Maven 버전을 확인하는 명령어

./gradlew -v

3-1. GitHub Actions 워크플로우를 저장할 디렉토리를 만드는 명령어

mkdir -p .github/workflows

3-2. Java 17 환경에서 Gradle로 빌드하는 워크플로우 파일을 deploy.yml로 작성할 때 사용되는 setup-java 액션 선언

-  name: Set up JDK 17
    uses: actions/setup-java@v3
    with:
        java-version: ‘17’

        distribution: ‘corretto’

3-3. ./gradlew build 명령어를 워크플로우에 추가하는 문장

-  name: Build with Gradle

    run: ./gradlew build

3-4. GitHub Actions에서 워크플로우 실행 결과를 확인하는 경로

Github 저장소에 있는 Acitions 탭에서 확인 가능

3-5. 빌드 결과로 생성된 .jar 파일 경로를 확인하는 리눅스 명령어

ls build/libs

3-6. 전체 워크플로우 동작을 간단히 설명하시오.

Github Actions에서 checkout → java설치 → build 로 실행하여 .jar파일을 자동생성한다.

4-1. EC2 서버에 jar 파일을 전송하는 scp 명령어

scp -i key.pem build/libs/app.jar ec2-user@<EC2_IP>:/home/ec2-user/app/

4-2. EC2 서버에 접속하는 ssh 명령어

ssh -i key.pem ec2-user@<EC2_IP>

4-3. 서버에서 jar 파일을 실행하는 java 명령어

java -jar /home/ec2-user/app/app.jar

4-4. 애플리케이션이 작동 중인지 확인하는 curl 명령어

curl http://localhost:8080

4-5. 실행 중인 애플리케이션을 롤백하는 명령어

cp /home/ec2-user/app/app_backup.jar /home/ec2-user/app/app.jar